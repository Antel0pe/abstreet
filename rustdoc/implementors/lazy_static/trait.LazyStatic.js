(function() {var implementors = {};
implementors["abstio"] = [{"text":"impl <a class=\"trait\" href=\"https://docs.rs/lazy_static/1.4.0/lazy_static/trait.LazyStatic.html\" title=\"trait lazy_static::LazyStatic\">LazyStatic</a> for <a class=\"struct\" href=\"abstio/abst_paths/struct.ROOT_DIR.html\" title=\"struct abstio::abst_paths::ROOT_DIR\">ROOT_DIR</a>","synthetic":false,"types":["abstio::abst_paths::ROOT_DIR"]},{"text":"impl <a class=\"trait\" href=\"https://docs.rs/lazy_static/1.4.0/lazy_static/trait.LazyStatic.html\" title=\"trait lazy_static::LazyStatic\">LazyStatic</a> for <a class=\"struct\" href=\"abstio/abst_paths/struct.ROOT_PLAYER_DIR.html\" title=\"struct abstio::abst_paths::ROOT_PLAYER_DIR\">ROOT_PLAYER_DIR</a>","synthetic":false,"types":["abstio::abst_paths::ROOT_PLAYER_DIR"]}];
implementors["game"] = [{"text":"impl <a class=\"trait\" href=\"https://docs.rs/lazy_static/1.4.0/lazy_static/trait.LazyStatic.html\" title=\"trait lazy_static::LazyStatic\">LazyStatic</a> for <a class=\"struct\" href=\"game/ltn/draw_cells/struct.COLORS.html\" title=\"struct game::ltn::draw_cells::COLORS\">COLORS</a>","synthetic":false,"types":["game::ltn::draw_cells::COLORS"]},{"text":"impl <a class=\"trait\" href=\"https://docs.rs/lazy_static/1.4.0/lazy_static/trait.LazyStatic.html\" title=\"trait lazy_static::LazyStatic\">LazyStatic</a> for <a class=\"struct\" href=\"game/sandbox/dashboards/trip_problems/struct.CLEAR_COLOR_SCALE.html\" title=\"struct game::sandbox::dashboards::trip_problems::CLEAR_COLOR_SCALE\">CLEAR_COLOR_SCALE</a>","synthetic":false,"types":["game::sandbox::dashboards::trip_problems::CLEAR_COLOR_SCALE"]},{"text":"impl <a class=\"trait\" href=\"https://docs.rs/lazy_static/1.4.0/lazy_static/trait.LazyStatic.html\" title=\"trait lazy_static::LazyStatic\">LazyStatic</a> for <a class=\"struct\" href=\"game/ungap/bike_network/struct.DEDICATED_TRAIL.html\" title=\"struct game::ungap::bike_network::DEDICATED_TRAIL\">DEDICATED_TRAIL</a>","synthetic":false,"types":["game::ungap::bike_network::DEDICATED_TRAIL"]},{"text":"impl <a class=\"trait\" href=\"https://docs.rs/lazy_static/1.4.0/lazy_static/trait.LazyStatic.html\" title=\"trait lazy_static::LazyStatic\">LazyStatic</a> for <a class=\"struct\" href=\"game/ungap/bike_network/struct.PROTECTED_BIKE_LANE.html\" title=\"struct game::ungap::bike_network::PROTECTED_BIKE_LANE\">PROTECTED_BIKE_LANE</a>","synthetic":false,"types":["game::ungap::bike_network::PROTECTED_BIKE_LANE"]},{"text":"impl <a class=\"trait\" href=\"https://docs.rs/lazy_static/1.4.0/lazy_static/trait.LazyStatic.html\" title=\"trait lazy_static::LazyStatic\">LazyStatic</a> for <a class=\"struct\" href=\"game/ungap/bike_network/struct.PAINTED_BIKE_LANE.html\" title=\"struct game::ungap::bike_network::PAINTED_BIKE_LANE\">PAINTED_BIKE_LANE</a>","synthetic":false,"types":["game::ungap::bike_network::PAINTED_BIKE_LANE"]},{"text":"impl <a class=\"trait\" href=\"https://docs.rs/lazy_static/1.4.0/lazy_static/trait.LazyStatic.html\" title=\"trait lazy_static::LazyStatic\">LazyStatic</a> for <a class=\"struct\" href=\"game/ungap/bike_network/struct.GREENWAY.html\" title=\"struct game::ungap::bike_network::GREENWAY\">GREENWAY</a>","synthetic":false,"types":["game::ungap::bike_network::GREENWAY"]}];
implementors["headless"] = [{"text":"impl <a class=\"trait\" href=\"https://docs.rs/lazy_static/1.4.0/lazy_static/trait.LazyStatic.html\" title=\"trait lazy_static::LazyStatic\">LazyStatic</a> for <a class=\"struct\" href=\"headless/struct.MAP.html\" title=\"struct headless::MAP\">MAP</a>","synthetic":false,"types":["headless::MAP"]},{"text":"impl <a class=\"trait\" href=\"https://docs.rs/lazy_static/1.4.0/lazy_static/trait.LazyStatic.html\" title=\"trait lazy_static::LazyStatic\">LazyStatic</a> for <a class=\"struct\" href=\"headless/struct.SIM.html\" title=\"struct headless::SIM\">SIM</a>","synthetic":false,"types":["headless::SIM"]},{"text":"impl <a class=\"trait\" href=\"https://docs.rs/lazy_static/1.4.0/lazy_static/trait.LazyStatic.html\" title=\"trait lazy_static::LazyStatic\">LazyStatic</a> for <a class=\"struct\" href=\"headless/struct.LOAD.html\" title=\"struct headless::LOAD\">LOAD</a>","synthetic":false,"types":["headless::LOAD"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()